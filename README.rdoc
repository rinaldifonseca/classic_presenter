== Classic Presenter

Presenter Pattern for Rails Applications

== Installation

gem install classic_presenter

== Usage

* In your Gemfile you should set:

    gem 'classic_presenter'

* Create a simple ActiveRecord class that you want to present:

    class Product < ActiveRecord::Base
    end

* Create a presenter class inheriting from ClassicPresenter::Base:

    class ProductPresenter < ClassicPresenter::Base
      def display_name
          if context.user_logged_in?
            name
          else
            context.link_to name, context.product_path
          end
      end

      def display_description
        context.render "products/description", :product => self
      end
    end

* In your view, show.html.erb for example, you can present your Product object using this syntax:

    <% present ProductPresenter, @product do |presenter| %>
    <%= presenter.display_name %>
    <%= presenter.display_description %>
    <% end %>

== Cool Features

* You can decorates a collection of objects with your presenter:

    #products_controller.rb
    @products = ProductPresenter.map(Post.all, view_context)

* Inside of the presenter we have an access to the context. In the example above the context is the View(ActionView), then we can access any method like
link_to, number_to_currency etc directly.

* You can also instantiate your presenter in the controller using the view_context and then to access any helper method like number_to_currency: 

    #products_controller.rb
    @product = ProductPresenter.new(Product.find(params[:id]), view_context)

    class ProductPresenter < ClassicPresenter::Base
      def price
        context.number_to_currency(price, :precision => 3)
      end
    end

* Since ClassicPresenter::Base is a Decorator, it implements the “transparent interface” requirements of the Gang of Four’s definition. This means that when we call some method in ProductPresenter, it will be delegated to the decorated object (in this case Product), like this:

    #products_controller.rb
    @product = ProductPresenter.new(Product.find(params[:id]))

    #show.html.erb
    <%= @product.name %>
    <%= @product.display_name %>

== License

(The MIT License)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
